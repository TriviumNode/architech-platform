/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { ExecuteMsg, Timestamp, Uint64, Addr, Uint128, Binary, HexBinary, Metadata, Trait, Cw20ReceiveMsg, NoisCallback, Payment, InstantiateMsg, Fee, QueryMsg, GetConfigResponse, Config, MintStatus } from "./Minter.types";
export interface MinterReadOnlyInterface {
  contractAddress: string;
  getPrice: () => Promise<GetPriceResponse>;
  getMintStatus: () => Promise<GetMintStatusResponse>;
  getBeneficiary: () => Promise<GetBeneficiaryResponse>;
  getNftAddr: () => Promise<GetNftAddrResponse>;
  getConfig: () => Promise<GetConfigResponse>;
}
export class MinterQueryClient implements MinterReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getPrice = this.getPrice.bind(this);
    this.getMintStatus = this.getMintStatus.bind(this);
    this.getBeneficiary = this.getBeneficiary.bind(this);
    this.getNftAddr = this.getNftAddr.bind(this);
    this.getConfig = this.getConfig.bind(this);
  }

  getPrice = async (): Promise<GetPriceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_price: {}
    });
  };
  getMintStatus = async (): Promise<GetMintStatusResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_mint_status: {}
    });
  };
  getBeneficiary = async (): Promise<GetBeneficiaryResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_beneficiary: {}
    });
  };
  getNftAddr = async (): Promise<GetNftAddrResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_nft_addr: {}
    });
  };
  getConfig = async (): Promise<GetConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_config: {}
    });
  };
}
export interface MinterInterface extends MinterReadOnlyInterface {
  contractAddress: string;
  sender: string;
  mint: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  setLaunchTime: ({
    launchTime,
    whitelistLaunchTime
  }: {
    launchTime?: Timestamp;
    whitelistLaunchTime?: Timestamp;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  setBeneficiary: ({
    newBeneficiary
  }: {
    newBeneficiary: Addr;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  setAdmin: ({
    newAdmin
  }: {
    newAdmin: Addr;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  preloadData: ({
    newData
  }: {
    newData: Metadata[];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  noisReceive: ({
    callback
  }: {
    callback: NoisCallback;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class MinterClient extends MinterQueryClient implements MinterInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.mint = this.mint.bind(this);
    this.setLaunchTime = this.setLaunchTime.bind(this);
    this.setBeneficiary = this.setBeneficiary.bind(this);
    this.setAdmin = this.setAdmin.bind(this);
    this.preloadData = this.preloadData.bind(this);
    this.receive = this.receive.bind(this);
    this.noisReceive = this.noisReceive.bind(this);
  }

  mint = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint: {}
    }, fee, memo, funds);
  };
  setLaunchTime = async ({
    launchTime,
    whitelistLaunchTime
  }: {
    launchTime?: Timestamp;
    whitelistLaunchTime?: Timestamp;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_launch_time: {
        launch_time: launchTime,
        whitelist_launch_time: whitelistLaunchTime
      }
    }, fee, memo, funds);
  };
  setBeneficiary = async ({
    newBeneficiary
  }: {
    newBeneficiary: Addr;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_beneficiary: {
        new_beneficiary: newBeneficiary
      }
    }, fee, memo, funds);
  };
  setAdmin = async ({
    newAdmin
  }: {
    newAdmin: Addr;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_admin: {
        new_admin: newAdmin
      }
    }, fee, memo, funds);
  };
  preloadData = async ({
    newData
  }: {
    newData: Metadata[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      preload_data: {
        new_data: newData
      }
    }, fee, memo, funds);
  };
  receive = async ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, fee, memo, funds);
  };
  noisReceive = async ({
    callback
  }: {
    callback: NoisCallback;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      nois_receive: {
        callback
      }
    }, fee, memo, funds);
  };
}