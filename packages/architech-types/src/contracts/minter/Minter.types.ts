/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type ExecuteMsg = {
  mint: {};
} | {
  set_launch_time: {
    launch_time?: Uint64 | null;
    whitelist_launch_time?: Uint64 | null;
  };
} | {
  set_beneficiary: {
    new_beneficiary: Addr;
  };
} | {
  set_admin: {
    new_admin: Addr;
  };
} | {
  preload_data: {
    new_data: Metadata[];
  };
} | {
  receive: Cw20ReceiveMsg;
} | {
  nois_receive: {
    callback: NoisCallback;
  };
};
export type Uint64 = string;
export type Addr = string;
export type Uint128 = string;
export type Binary = string;
export type Timestamp = Uint64;
export type HexBinary = string;
export interface Metadata {
  animation_url?: string | null;
  attributes?: Trait[] | null;
  background_color?: string | null;
  description?: string | null;
  external_url?: string | null;
  image?: string | null;
  image_data?: string | null;
  name?: string | null;
  royalty_payment_address?: string | null;
  royalty_percentage?: number | null;
  youtube_url?: string | null;
}
export interface Trait {
  display_type?: string | null;
  trait_type: string;
  value: string;
}
export interface Cw20ReceiveMsg {
  amount: Uint128;
  msg: Binary;
  sender: string;
  [k: string]: unknown;
}
export interface NoisCallback {
  job_id: string;
  published: Timestamp;
  randomness: HexBinary;
}
export type Payment = {
  cw20_payment: {
    amount: Uint128;
    token: Addr;
    [k: string]: unknown;
  };
} | {
  native_payment: {
    amount: Uint128;
    denom: string;
    [k: string]: unknown;
  };
};
export interface InstantiateMsg {
  admin_fee: Fee;
  beneficiary: Addr;
  contract_name: string;
  credit_contract: string;
  launch_time: Uint64;
  mint_limit?: number | null;
  mint_price: Payment;
  nft_code_id: number;
  nft_symbol: string;
  nois_proxy: string;
  operator: Addr;
  reward_admin: string;
  whitelist_launch_time?: Uint64 | null;
  whitelisted?: string[] | null;
  wl_mint_price?: Payment | null;
}
export interface Fee {
  decimal_places: number;
  rate: number;
  recipient: string;
  [k: string]: unknown;
}
export type QueryMsg = {
  get_price: {};
} | {
  get_mint_limit: {
    sender: string;
  };
} | {
  get_mint_status: {};
} | {
  get_beneficiary: {};
} | {
  get_nft_addr: {};
} | {
  get_config: {};
};
export interface GetBeneficiaryResponse {
  beneficiary: Addr;
}
export interface GetConfigResponse {
  config: Config;
}
export interface Config {
  admin: Addr;
  beneficiary: Addr;
  launch_time: Timestamp;
  mint_limit?: number | null;
  nft_admin: Addr;
  price: Payment;
  whitelist_launch_time?: Timestamp | null;
  wl_price?: Payment | null;
  [k: string]: unknown;
}
export interface GetMintLimitResponse {
  mint_limit?: number | null;
  mints?: number | null;
  whitelisted: boolean;
}
export interface GetMintStatusResponse {
  launch_time: Uint64;
  pending: number;
  remaining: number;
  whitelist_launch_time?: Uint64 | null;
}
export interface GetNftAddrResponse {
  nft_address: Addr;
}
export interface GetPreloadResponse {
  preload: Metadata[];
}
export interface GetPriceResponse {
  price: Payment;
  wl_price?: Payment | null;
}
export interface GetWhitelistResponse {
  whitelist: string[];
}