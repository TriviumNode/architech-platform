/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { ExecuteMsg, Addr, Uint128, Binary, FeeStructure, Cw20ReceiveMsg, InstantiateMsg, QueryMsg, Timestamp, Uint64, ArchIDLevel, PartnerLevel, Plan, Tier } from "./Tiers.types";
export interface TiersReadOnlyInterface {
  contractAddress: string;
  queryFees: () => Promise<QueryFeesResponse>;
  queryPlan: ({
    daoAddr
  }: {
    daoAddr: Addr;
  }) => Promise<QueryPlanResponse>;
  queryUpgrade: ({
    daoAddr,
    newPlan
  }: {
    daoAddr: Addr;
    newPlan: Plan;
  }) => Promise<QueryUpgradeResponse>;
}
export class TiersQueryClient implements TiersReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.queryFees = this.queryFees.bind(this);
    this.queryPlan = this.queryPlan.bind(this);
    this.queryUpgrade = this.queryUpgrade.bind(this);
  }

  queryFees = async (): Promise<QueryFeesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_fees: {}
    });
  };
  queryPlan = async ({
    daoAddr
  }: {
    daoAddr: Addr;
  }): Promise<QueryPlanResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_plan: {
        dao_addr: daoAddr
      }
    });
  };
  queryUpgrade = async ({
    daoAddr,
    newPlan
  }: {
    daoAddr: Addr;
    newPlan: Plan;
  }): Promise<QueryUpgradeResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_upgrade: {
        dao_addr: daoAddr,
        new_plan: newPlan
      }
    });
  };
}
export interface TiersInterface extends TiersReadOnlyInterface {
  contractAddress: string;
  sender: string;
  changeAdmin: ({
    newAdmin
  }: {
    newAdmin: Addr;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  changeFees: ({
    newFees
  }: {
    newFees: FeeStructure;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class TiersClient extends TiersQueryClient implements TiersInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.changeAdmin = this.changeAdmin.bind(this);
    this.changeFees = this.changeFees.bind(this);
    this.receive = this.receive.bind(this);
  }

  changeAdmin = async ({
    newAdmin
  }: {
    newAdmin: Addr;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      change_admin: {
        new_admin: newAdmin
      }
    }, fee, memo, funds);
  };
  changeFees = async ({
    newFees
  }: {
    newFees: FeeStructure;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      change_fees: {
        new_fees: newFees
      }
    }, fee, memo, funds);
  };
  receive = async ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, fee, memo, funds);
  };
}