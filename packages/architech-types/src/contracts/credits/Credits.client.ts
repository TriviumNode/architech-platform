/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { ExecuteMsg, Addr, Uint128, Binary, Config, InstantiateMsg, QueryMsg, Boolean, Stats, ArrayOfAddr } from "./Credits.types";
export interface CreditsReadOnlyInterface {
  contractAddress: string;
  checkAdmin: () => Promise<CheckAdminResponse>;
  checkBalance: ({
    user
  }: {
    user: Addr;
  }) => Promise<CheckBalanceResponse>;
  checkPermission: ({
    contract
  }: {
    contract: Addr;
  }) => Promise<CheckPermissionResponse>;
  permissionedContracts: () => Promise<PermissionedContractsResponse>;
  checkStats: () => Promise<CheckStatsResponse>;
}
export class CreditsQueryClient implements CreditsReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.checkAdmin = this.checkAdmin.bind(this);
    this.checkBalance = this.checkBalance.bind(this);
    this.checkPermission = this.checkPermission.bind(this);
    this.permissionedContracts = this.permissionedContracts.bind(this);
    this.checkStats = this.checkStats.bind(this);
  }

  checkAdmin = async (): Promise<CheckAdminResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      check_admin: {}
    });
  };
  checkBalance = async ({
    user
  }: {
    user: Addr;
  }): Promise<CheckBalanceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      check_balance: {
        user
      }
    });
  };
  checkPermission = async ({
    contract
  }: {
    contract: Addr;
  }): Promise<CheckPermissionResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      check_permission: {
        contract
      }
    });
  };
  permissionedContracts = async (): Promise<PermissionedContractsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      permissioned_contracts: {}
    });
  };
  checkStats = async (): Promise<CheckStatsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      check_stats: {}
    });
  };
}
export interface CreditsInterface extends CreditsReadOnlyInterface {
  contractAddress: string;
  sender: string;
  editAdmin: ({
    newAdmin
  }: {
    newAdmin: Addr;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  editOperatorPermissions: ({
    addPerms,
    address
  }: {
    addPerms: boolean;
    address: Addr;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  editCreditPermissions: ({
    addPerms,
    address
  }: {
    addPerms: boolean;
    address: Addr;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  editCreditRewards: ({
    newRewards
  }: {
    newRewards: Config;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  earnCredits: ({
    msg,
    sender
  }: {
    msg?: Binary;
    sender: Addr;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class CreditsClient extends CreditsQueryClient implements CreditsInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.editAdmin = this.editAdmin.bind(this);
    this.editOperatorPermissions = this.editOperatorPermissions.bind(this);
    this.editCreditPermissions = this.editCreditPermissions.bind(this);
    this.editCreditRewards = this.editCreditRewards.bind(this);
    this.earnCredits = this.earnCredits.bind(this);
  }

  editAdmin = async ({
    newAdmin
  }: {
    newAdmin: Addr;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      edit_admin: {
        new_admin: newAdmin
      }
    }, fee, memo, funds);
  };
  editOperatorPermissions = async ({
    addPerms,
    address
  }: {
    addPerms: boolean;
    address: Addr;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      edit_operator_permissions: {
        add_perms: addPerms,
        address
      }
    }, fee, memo, funds);
  };
  editCreditPermissions = async ({
    addPerms,
    address
  }: {
    addPerms: boolean;
    address: Addr;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      edit_credit_permissions: {
        add_perms: addPerms,
        address
      }
    }, fee, memo, funds);
  };
  editCreditRewards = async ({
    newRewards
  }: {
    newRewards: Config;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      edit_credit_rewards: {
        new_rewards: newRewards
      }
    }, fee, memo, funds);
  };
  earnCredits = async ({
    msg,
    sender
  }: {
    msg?: Binary;
    sender: Addr;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      earn_credits: {
        msg,
        sender
      }
    }, fee, memo, funds);
  };
}