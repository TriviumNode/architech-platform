/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { ExecuteMsg, Uint128, Binary, Cw20ReceiveMsg, Cw721ReceiveMsg, InstantiateMsg, Fee, QueryMsg, Ask, Cw20HookMsg, Cw721HookMsg } from "./Marketplace.types";
export interface MarketplaceReadOnlyInterface {
  contractAddress: string;
  cw721Deposits: ({
    collection,
    owner
  }: {
    collection: string;
    owner: string;
  }) => Promise<Cw721DepositsResponse>;
  ask: ({
    collection,
    tokenId
  }: {
    collection: string;
    tokenId: string;
  }) => Promise<AskResponse>;
  getAllAsks: () => Promise<GetAllAsksResponse>;
}
export class MarketplaceQueryClient implements MarketplaceReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.cw721Deposits = this.cw721Deposits.bind(this);
    this.ask = this.ask.bind(this);
    this.getAllAsks = this.getAllAsks.bind(this);
  }

  cw721Deposits = async ({
    collection,
    owner
  }: {
    collection: string;
    owner: string;
  }): Promise<Cw721DepositsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      cw721_deposits: {
        collection,
        owner
      }
    });
  };
  ask = async ({
    collection,
    tokenId
  }: {
    collection: string;
    tokenId: string;
  }): Promise<AskResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      ask: {
        collection,
        token_id: tokenId
      }
    });
  };
  getAllAsks = async (): Promise<GetAllAsksResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_all_asks: {}
    });
  };
}
export interface MarketplaceInterface extends MarketplaceReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  receiveNft: ({
    msg,
    sender,
    tokenId
  }: {
    msg: Binary;
    sender: string;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  purchaseNative: ({
    collection,
    tokenId
  }: {
    collection: string;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  removeListing: ({
    collection,
    tokenId
  }: {
    collection: string;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class MarketplaceClient extends MarketplaceQueryClient implements MarketplaceInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.receiveNft = this.receiveNft.bind(this);
    this.purchaseNative = this.purchaseNative.bind(this);
    this.removeListing = this.removeListing.bind(this);
  }

  receive = async ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, fee, memo, funds);
  };
  receiveNft = async ({
    msg,
    sender,
    tokenId
  }: {
    msg: Binary;
    sender: string;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive_nft: {
        msg,
        sender,
        token_id: tokenId
      }
    }, fee, memo, funds);
  };
  purchaseNative = async ({
    collection,
    tokenId
  }: {
    collection: string;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      purchase_native: {
        collection,
        token_id: tokenId
      }
    }, fee, memo, funds);
  };
  removeListing = async ({
    collection,
    tokenId
  }: {
    collection: string;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_listing: {
        collection,
        token_id: tokenId
      }
    }, fee, memo, funds);
  };
}