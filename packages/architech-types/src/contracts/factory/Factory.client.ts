/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { ExecuteMsg, Addr, Timestamp, Uint64, Payment, Uint128, Metadata, Trait, Fee, InstantiateMsg, Coin, QueryMsg, ArrayOfMinter, Minter } from "./Factory.types";
export interface FactoryReadOnlyInterface {
  contractAddress: string;
  minters: () => Promise<MintersResponse>;
}
export class FactoryQueryClient implements FactoryReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.minters = this.minters.bind(this);
  }

  minters = async (): Promise<MintersResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      minters: {}
    });
  };
}
export interface FactoryInterface extends FactoryReadOnlyInterface {
  contractAddress: string;
  sender: string;
  initRandomProject: ({
    beneficiary,
    collectionAdmin,
    contractName,
    label,
    launchTime,
    mintPrice,
    nftSymbol,
    rewardAdmin,
    whitelistLaunchTime,
    whitelisted
  }: {
    beneficiary: Addr;
    collectionAdmin: Addr;
    contractName: string;
    label: string;
    launchTime?: Timestamp;
    mintPrice: Payment;
    nftSymbol: string;
    rewardAdmin: string;
    whitelistLaunchTime?: Timestamp;
    whitelisted?: string[];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  initCopyProject: ({
    beneficiary,
    endTime,
    launchTime,
    metadata,
    mintLimit,
    mintPrice,
    minterAdmin,
    minterLabel,
    nftAdmin,
    nftLabel,
    nftName,
    nftSymbol
  }: {
    beneficiary: Addr;
    endTime?: Uint64;
    launchTime?: Uint64;
    metadata: Metadata;
    mintLimit?: number;
    mintPrice?: Payment;
    minterAdmin: Addr;
    minterLabel: string;
    nftAdmin: Addr;
    nftLabel: string;
    nftName: string;
    nftSymbol: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  changeAdmin: ({
    newAdmin
  }: {
    newAdmin: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  changeFees: ({
    newFees
  }: {
    newFees: Fee;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class FactoryClient extends FactoryQueryClient implements FactoryInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.initRandomProject = this.initRandomProject.bind(this);
    this.initCopyProject = this.initCopyProject.bind(this);
    this.changeAdmin = this.changeAdmin.bind(this);
    this.changeFees = this.changeFees.bind(this);
  }

  initRandomProject = async ({
    beneficiary,
    collectionAdmin,
    contractName,
    label,
    launchTime,
    mintPrice,
    nftSymbol,
    rewardAdmin,
    whitelistLaunchTime,
    whitelisted
  }: {
    beneficiary: Addr;
    collectionAdmin: Addr;
    contractName: string;
    label: string;
    launchTime?: Timestamp;
    mintPrice: Payment;
    nftSymbol: string;
    rewardAdmin: string;
    whitelistLaunchTime?: Timestamp;
    whitelisted?: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      init_random_project: {
        beneficiary,
        collection_admin: collectionAdmin,
        contract_name: contractName,
        label,
        launch_time: launchTime,
        mint_price: mintPrice,
        nft_symbol: nftSymbol,
        reward_admin: rewardAdmin,
        whitelist_launch_time: whitelistLaunchTime,
        whitelisted
      }
    }, fee, memo, funds);
  };
  initCopyProject = async ({
    beneficiary,
    endTime,
    launchTime,
    metadata,
    mintLimit,
    mintPrice,
    minterAdmin,
    minterLabel,
    nftAdmin,
    nftLabel,
    nftName,
    nftSymbol
  }: {
    beneficiary: Addr;
    endTime?: Uint64;
    launchTime?: Uint64;
    metadata: Metadata;
    mintLimit?: number;
    mintPrice?: Payment;
    minterAdmin: Addr;
    minterLabel: string;
    nftAdmin: Addr;
    nftLabel: string;
    nftName: string;
    nftSymbol: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      init_copy_project: {
        beneficiary,
        end_time: endTime,
        launch_time: launchTime,
        metadata,
        mint_limit: mintLimit,
        mint_price: mintPrice,
        minter_admin: minterAdmin,
        minter_label: minterLabel,
        nft_admin: nftAdmin,
        nft_label: nftLabel,
        nft_name: nftName,
        nft_symbol: nftSymbol
      }
    }, fee, memo, funds);
  };
  changeAdmin = async ({
    newAdmin
  }: {
    newAdmin: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      change_admin: {
        new_admin: newAdmin
      }
    }, fee, memo, funds);
  };
  changeFees = async ({
    newFees
  }: {
    newFees: Fee;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      change_fees: {
        new_fees: newFees
      }
    }, fee, memo, funds);
  };
}